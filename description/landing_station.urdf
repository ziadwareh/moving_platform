<?xml version="1.0"?>

<!-- URDF of the original design of the platform where one link was a fixed base and the second on 
    top is the moving landing platform difference between this and the moving_platform.urdf is the
    origin of the platform link and its slider joint -->

<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="moving_platform">

    <!-- <xacro:include filename="inertia.xacro" /> -->

    <!-- This is the fixed link that represents the world that we have -->
    <link name="world"></link>

    <!-- This is the fixed join linking the base link that will not be moving to our world -->
    <joint name="base_joint" type="fixed">
        <origin xyz="0 0 0.0" rpy="0.0 0.0 0.0"/>
        <parent link="world"/>
        <child link="base_link"/>
    </joint>

    <!-- Now i will create the base link that will not move and have the platform that is actually going to move on top of it -->

    <link name="base_link">
        <inertial>
            <origin xyz="0.0 0.0 0.135" rpy="0.0 0.0 0.0"/>
            <mass value="10"/>
            <inertia ixx="7.5521" ixy="0" ixz="0.0" iyy="20.8854" iyz="0.0" izz="28.3333"/>
        </inertial>
        <visual>
            <origin xyz="0.0 0.0 0.135" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="5.0 3.0 0.25"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0.0 0.0 0.135" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="5.0 3.0 0.25"/>
            </geometry>
        </collision>
    </link>

    <!-- defining the color of the base_link we created -->

    <gazebo reference="base_link">
        <material>Gazebo/Purple</material>
    </gazebo>

    <!-- This will act as the joint that will enable sliding of the platform along the x axis -->
    <joint name="slider_joint" type="prismatic">
        <origin xyz="-2 0 0.5" rpy="0.0 0.0 0.0"/>
        <parent link="base_link"/>
        <child link="platform_link"/>
        <axis xyz="1 0.0 0.0"/>
        <limit lower="0" upper="4" effort="10.0" velocity="100.0"/>
    </joint>


    <!-- creating the link that would represent the platorm that we want to move around -->
    <link name="platform_link">
        <inertial>
            <origin xyz="0 0.0 -0.135" rpy="0.0 0.0 0.0"/>
            <mass value="3"/>
            <inertia ixx="0.265625" ixy="0.0" ixz="0.0" iyy="0.265625" iyz="0.0" izz="0.5"/>
        </inertial>
        <visual>
            <origin xyz="0 0.0 -0.135" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="1 1 0.25"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0.0 -0.135" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="1 1 0.25"/>
            </geometry>
        </collision>
    </link>

    <!-- defining the color of the platform_link -->
    <gazebo reference="platform_link">
        <material>Gazebo/Black</material>
    </gazebo>


    <!-- The following is a gazebo plugin in order to connect gazebo to ros in order to be able to control -->

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/moving_landing_station</robotNamespace>
        </plugin>
    </gazebo>

    <!-- The following is in order to be able to attach an actuator to the link tha we want to move -->
    <!-- The transmisson element maps an actuator to the joint -->
    <transmission name="base_to_platform_trans">
        <!-- The transmission type in here means that we are directly mapping the output of the controller to the joint -->
        <type>transmission_interface/SimpleTransmission</type>
        <actuator name="motor1">
            <!-- This usually represents the reduction due to a gear box. In our case the reduction here is 1 meaning transmission ration of 1 -->
            <mechanicalReduction>1</mechanicalReduction>
            <!-- Now we are specifying the type of controller that will be attached -->
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </actuator>
        <!-- Here we specify the join we want to apply this to, in my case it is slider_joint -->
        <joint name="slider_joint">
            <!-- This is the type of controller we want to implement -->
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
    </transmission>

</robot>